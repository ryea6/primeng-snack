 // 🚀 MAIN METHOD - Works with any Observable from any service
  withLoadingUpdates<T>(
    loadingMessage: string,
    observable: Observable<T>,
    options: {
      successMessage: string
      errorMessage?: string
      onSuccess?: (result: T) => void
      onError?: (error: any) => void
      successDelay?: number
      retryCallback?: () => void // ✅ OPTIONAL!
    },
  ): Observable<T> {
    const {
      successMessage,
      errorMessage = "Operation failed. Please try again.",
      onSuccess,
      onError,
      successDelay = 800,
      retryCallback, // ✅ Optional - no retry button if not provided
    } = options

    const loadingId = this.loading(loadingMessage, "Please Wait")

    return observable.pipe(
      tap((result) => {
        this.update(loadingId, {
          type: "success",
          title: "Complete",
          message: successMessage,
          duration: 3000,
          showCloseButton: true,
        })

        if (onSuccess) {
          setTimeout(() => onSuccess(result), successDelay)
        }
      }),
      catchError((error) => {
        // ✅ Only show retry button if retryCallback is provided
        if (retryCallback) {
          this.update(loadingId, {
            type: "error",
            title: "Error",
            message: errorMessage,
            duration: 0,
            showCloseButton: true,
            actionLabel: "Retry",
            actionCallback: retryCallback,
          })
        } else {
          // ✅ No retry button - just error message
          this.update(loadingId, {
            type: "error",
            title: "Error",
            message: errorMessage,
            duration: 0,
            showCloseButton: true,
          })
        }

        onError?.(error)
        return throwError(() => error)
      }),
    )
  }

showActualFlow(): void {
    console.log("🔄 Starting update flow...")

    // This is what actually happens:
    this.snackbar
      .withLoadingUpdates("Updating claim...", this.claimsService.updateClaimSrvc("123", { status: "approved" }), {
        successMessage: "Claim updated successfully!",
        onSuccess: (result) => {
          console.log("✅ onSuccess callback:", result)
        },
      })
      .subscribe({
        next: (result) => {
          console.log("✅ subscribe next:", result)
          console.log("🎯 Both the HTTP request AND snackbar logic completed!")
        },
        error: (error) => {
          console.log("❌ subscribe error:", error)
        },
      })
  }
